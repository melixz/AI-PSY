import React, { useState } from "react";
import microphoneAc from "../../assets/icons/microphoneAc.svg";
import microphone from "../../assets/icons/microphone.svg";
import SegmentBtn from "./SegmentBtn";

interface InputDiaryProps {
  placeholder: string;
  disabled?: boolean;
  onSubmit: (value: string) => void;
}

const InputDiary: React.FC<InputDiaryProps> = ({
  placeholder,
  disabled = false,
  onSubmit,
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const [value, setValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);

  // –ú–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  const mockResponse =
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫–æ–≤—ã–π –≤—Ö–æ–¥! –í–∞—à–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏ –≤–∞–∂–Ω—ã. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–º–æ—Ü–∏–∏ –∏ —Å–∏—Ç—É–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è.";

  const handleSend = () => {
    if (value.trim() === "" || isLoading || disabled) return;
    setIsLoading(true);
    setTimeout(() => {
      setIsLoading(false);
      setIsSubmitted(true); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –±–ª–æ–∫ –æ—Ç–≤–µ—Ç–∞
      onSubmit(value);
    }, 1500);
  };

  const handleSave = () => {
    if (isSubmitted) {
      alert("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ");
    } else {
      handleSend(); // –ï—Å–ª–∏ –∏–Ω–ø—É—Ç –∞–∫—Ç–∏–≤–µ–Ω, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter" && !isLoading && !disabled) {
      handleSend();
    }
  };

  const handleCancel = () => {
    setValue("");
    setIsRecording(false);
    setIsSubmitted(false);
  };

  return (
    <div className="w-[800px] h-auto flex flex-col space-y-10">
      {!isSubmitted ? (
        // üîπ **–ë–ª–æ–∫ –≤–≤–æ–¥–∞**
        <div
          className={`
            relative flex items-center px-4 py-2 rounded-full transition-all duration-300
            ${disabled ? "cursor-not-allowed" : ""}
          `}
          style={
            disabled
              ? {
                  border: "1px solid #ccc",
                  background: "#f5f5f5",
                }
              : isFocused
              ? {
                  border: "1px solid transparent",
                  background:
                    "linear-gradient(#fff, #fff) padding-box, linear-gradient(to right, #6FDBB8, #6EBFF9) border-box",
                }
              : {
                  border: "1px solid #ccc",
                  background:
                    "linear-gradient(90deg, rgba(154, 112, 177, 0.07) 0%, rgba(237, 148, 148, 0.07) 100%)",
                }
          }
          onFocus={() => !disabled && setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
        >
          <input
            type="text"
            value={isLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è..." : value}
            disabled={disabled || isLoading}
            onChange={(e) => setValue(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className={`
              flex-1 px-2 py-1 bg-transparent outline-none
              ${disabled || isLoading ? "text-gray-400" : "text-gray-800"}
            `}
          />
          {!isLoading && (
            <button
              type="button"
              disabled={disabled}
              onClick={() => setIsRecording(!isRecording)}
              className={`mx-2 ${disabled ? "opacity-50 cursor-not-allowed" : ""}`}
            >
              <img
                src={isRecording ? microphoneAc : microphone}
                alt="microphone"
                className="w-[20px] h-[20px]"
              />
            </button>
          )}
        </div>
      ) : (
        // üîπ **–ë–ª–æ–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏**
        <div
          className="w-[808px] h-[690px] px-6 py-6 overflow-y-auto rounded-[30px] text-gray-800 text-heading3 mt-[5vh]"
          style={{
            border: "1px solid transparent",
            background:
              "linear-gradient(#fff, #fff) padding-box, linear-gradient(to right, #6FDBB8, #6EBFF9) border-box",
          }}
        >
          {mockResponse}
        </div>
      )}

      {/* üîπ **–ö–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏** */}
      <div className="h-[40px] flex justify-center gap-4 items-center">
        <SegmentBtn title="–û—Ç–º–µ–Ω–∞" isActive={false} onClick={handleCancel} />
        <SegmentBtn title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" isActive={true} onClick={handleSave} />
      </div>
    </div>
  );
};

export default InputDiary;
